<?xml version="1.0"?>
<robot name="metrobot_base" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- All measurements are in meters -->

    <!-- Drive Wheels -->
    <xacro:property name="drive_wheel_radius" value="0.0508" />
    <xacro:property name="drive_wheel_mass" value="1"/>
    <xacro:property name="drive_wheel_thickness" value="0.01905"/>
    <xacro:property name="drive_wheel_intertia"
                    value="${1.0/12*drive_wheel_mass*
                    (3*drive_wheel_radius*drive_wheel_radius*drive_wheel_radius +
                    drive_wheel_thickness*drive_wheel_thickness)}"/>

    <!-- distance from the edge of the base to the edge of the wheel -->
    <xacro:property name="drive_wheel_base_separation" value="0.003175"/>
    <!-- signed offset from the center of base -->
    <xacro:property name="drive_wheel_offset" value="0.0"/>
    <!-- vertical offset of wheel from the center of the chassis -->
    <xacro:property name="drive_wheel_vertical_offset" value="0.0"/>


    <!-- Omni wheels -->
    <xacro:property name="omni_wheel_radius" value="0.0508"/>
    <xacro:property name="omni_wheel_thickness" value="0.0254"/>
    <xacro:property name="omni_wheel_mass" value="0.2"/>
    <xacro:property name="omni_wheel_intertia" value="${2.0/5*omni_wheel_mass*omni_wheel_radius*omni_wheel_radius}"/>

    <!-- distance from the edge of the base to the edge of the wheel -->
    <xacro:property name="omni_wheel_base_separation" value="0.003175"/>
    <!-- offset from the edges of the base -->
    <xacro:property name="omni_wheel_offset" value="0.0508"/>
    <!-- offset from the center of the base -->
    <xacro:property name="omni_wheel_vertical_offset" value="-0.003175"/>

    <!-- Base Frame -->
    <xacro:property name="base_width" value="0.4064"/>
    <xacro:property name="base_length" value="0.381"/>
    <xacro:property name="base_thickness" value="0.0508"/>
    <xacro:property name="base_mass" value="5"/>

    <xacro:include filename="$(find metrobot_description)/urdf/macros.xacro" />
    <xacro:include filename="$(find metrobot_description)/urdf/metrobot_base.gazebo" />

    <link name="base_link"/>

    <!-- Add chassis and inertial link -->
    <link name="chassis">
        <interial>
            <xacro:chassis_inertial_params/>
        </interial>
        <visual>
            <xacro:chassis_geometry/>
            <material name="white" />
        </visual>
        <collision>
            <xacro:chassis_geometry/>
        </collision>
    </link>

    <joint name="base_chassis_joint" type="fixed">
        <origin xyz="${-drive_wheel_offset} 0 0" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="chassis"/>
    </joint>

    <!-- Add in base footprint -->
    <link name="base_footprint"/>
    <joint name="base_footprint_joint" type="fixed">
        <origin xyz="0 0 ${-drive_wheel_radius+drive_wheel_vertical_offset}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="base_footprint"/>
    </joint>

    <!-- Add left and right wheels -->
    <link name="left_drive_wheel">
        <inertial>
            <xacro:drive_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:drive_wheel_geometry />
            <material name="black" />
        </visual>
        <collision>
            <xacro:drive_wheel_geometry />
        </collision>
    </link>

    <joint name="left_drive_wheel_joint" type="continuous">
        <origin xyz="${drive_wheel_offset}
        ${base_length/2 + drive_wheel_base_separation + drive_wheel_thickness/2}
        ${drive_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="left_drive_wheel" />
        <axis xyz="0 0 -1" />
        <limit effort="10" velocity="100" />
    </joint>

    <xacro:drive_wheel_transmission name="left_drive_wheel" />

    <link name="right_drive_wheel">
        <inertial>
            <xacro:drive_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:drive_wheel_geometry />
            <material name="black" />
        </visual>
        <collision>
            <xacro:drive_wheel_geometry />
        </collision>
    </link>

    <joint name="right_drive_wheel_joint" type="continuous">
        <origin xyz="${drive_wheel_offset}
        ${-1*(base_length/2 + drive_wheel_base_separation + drive_wheel_thickness/2)}
        ${drive_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="right_drive_wheel" />
        <axis xyz="0 0 -1" />
        <limit effort="10" velocity="100" />
    </joint>

    <xacro:drive_wheel_transmission name="right_drive_wheel" />

    <!-- Omni wheels -->
    <link name="front_left_omni_wheel">
        <inertial>
            <xacro:omni_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:omni_wheel_geometry />
            <material name="grey" />
        </visual>
        <collision>
            <xacro:omni_wheel_geometry />
        </collision>
    </link>

    <joint name="front_left_omni_wheel_joint" type="fixed">
        <origin xyz="${base_length/2 - omni_wheel_offset}
        ${base_width/2 + omni_wheel_base_separation}
        ${omni_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="front_left_omni_wheel" />
    </joint>

    <link name="rear_left_omni_wheel">
        <inertial>
            <xacro:omni_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:omni_wheel_geometry />
            <material name="grey" />
        </visual>
        <collision>
            <xacro:omni_wheel_geometry />
        </collision>
    </link>

    <joint name="rear_left_omni_wheel_joint" type="fixed">
        <origin xyz="${-base_length/2 + omni_wheel_offset}
        ${base_width/2 + omni_wheel_base_separation}
        ${omni_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="rear_left_omni_wheel" />
    </joint>

    <link name="rear_right_omni_wheel">
        <inertial>
            <xacro:omni_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:omni_wheel_geometry />
            <material name="grey" />
        </visual>
        <collision>
            <xacro:omni_wheel_geometry />
        </collision>
    </link>

    <joint name="rear_right_omni_wheel_joint" type="fixed">
        <origin xyz="${-base_length/2 + omni_wheel_offset}
        ${-base_width/2 - omni_wheel_base_separation}
        ${omni_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="rear_right_omni_wheel" />
    </joint>

    <link name="front_right_omni_wheel">
        <inertial>
            <xacro:omni_wheel_inertial_params />
        </inertial>
        <visual>
            <xacro:omni_wheel_geometry />
            <material name="grey" />
        </visual>
        <collision>
            <xacro:omni_wheel_geometry />
        </collision>
    </link>

    <joint name="front_right_omni_wheel_joint" type="fixed">
        <origin xyz="${base_length/2 - omni_wheel_offset}
        ${-base_width/2 - omni_wheel_base_separation}
        ${omni_wheel_vertical_offset}" rpy="1.5708 0 0" />
        <parent link="chassis" />
        <child link="front_right_omni_wheel" />
    </joint>

    <!-- IMU -->
    <link name="imu_link">
        <visual>
            <geometry>
                <box size="0.001 0.002 0.0005" />
            </geometry>
            <material name="black" />
        </visual>
    </link>
    <joint name="chassis_imu_joint" type="fixed">
        <origin xyz="0.0 0.00 0.08" rpy="0 0 0" />
        <parent link="chassis" />
        <child link="imu_link" />
    </joint>
    <gazebo reference="imu_link">
        <sensor name="metrobot_imu" type="imu">
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <imu>
                <angular_velocity>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                    </z>
                </angular_velocity>
                <linear_acceleration>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                    </z>
                </linear_acceleration>
            </imu>
            <plugin name="bytes_imu" filename="libgazebo_ros_imu_sensor.so">
                <ros>
                    <namespace>imu</namespace>
                    <remapping>~/out:=data</remapping>
                </ros>
                <initial_orientation_as_reference>false</initial_orientation_as_reference>
            </plugin>
        </sensor>
    </gazebo>

    <!-- GPS -->
    <link name="gps_link">
        <visual>
            <geometry>
                <box size="0.01 0.02 0.005" />
            </geometry>
            <material name="black" />
        </visual>
    </link>
    <joint name="chassis_gps_joint" type="fixed">
        <origin xyz="-0.05 0.0 0.0825" rpy="0 0 0" />
        <parent link="chassis" />
        <child link="gps_link" />
    </joint>
    <gazebo reference="gps_link">
        <sensor name="gps_sensor" type="gps">
            <always_on>true</always_on>
            <update_rate>1.0</update_rate>
            <plugin name="gps_controller" filename="libgazebo_ros_gps_sensor.so">
                <ros>
                    <remapping>gps_controller/out:=gps</remapping>
                </ros>
                <frame_name>gps_link</frame_name>
            </plugin>
        </sensor>
        <material>Gazebo/Grey</material>
    </gazebo>

    <!-- Main cameras - left camera is used for main camera feed, right camera is used for stereo (camera are approximately 200mm appart) -->
<!--    <link name="stereo_cam_link"/>-->
<!--    <joint name="head_stereo_cam_joint" type="fixed">-->
<!--        <origin xyz="${head_width/2} 0.0 0.0" rpy="0 0 0" />-->
<!--        <parent link="head" />-->
<!--        <child link="stereo_cam_link" />-->
<!--    </joint>-->
<!--    <xacro:camera_sensor name="stereo/left" x="0" y="0.1" z="0" r="0" p="0" yaw="0" parent="stereo_cam_link"/>-->
<!--    <xacro:camera_sensor name="stereo/right" x="0" y="-0.1" z="0" r="0" p="0" yaw="0" parent="stereo_cam_link"/>-->

    <!-- Intel Realense T265 + D435 -->
    <!-- D435 is about 0.2 meters above the ground -->
<!--    <xacro:depth name="d430" x="${head_width/2}" y="0" z="${-wheel_radius+vertical_wheel_offset+0.0675}" r="0" p="0" yaw="0" parent="head"/>-->

<!--    <link name="t260_link">-->
<!--        <visual>-->
<!--            <origin xyz="0 0 0" rpy="0 0 0" />-->
<!--            <geometry>-->
<!--                <box size="0.0125 0.108 0.025" />-->
<!--            </geometry>-->
<!--            <material name="white" />-->
<!--        </visual>-->
<!--    </link>-->
<!--    <joint name="chassis_t260_joint" type="fixed">-->
<!--        &lt;!&ndash; Rotate 54.1 deg off vertical &ndash;&gt;-->
<!--        <origin xyz="0.09 0 0.08" rpy="0 -0.9442231 0" />-->
<!--        <parent link="chassis" />-->
<!--        <child link="t260_link" />-->
<!--    </joint>-->

</robot>